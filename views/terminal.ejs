<%- include('partials/header', { title: title }) %>

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3">
                <i class="bi bi-terminal"></i>
                Command Terminal
            </h1>
            <div>
                <button type="button" class="btn btn-outline-secondary me-2" onclick="window.history.back()">
                    <i class="bi bi-arrow-left"></i>
                    Back
                </button>
                <button type="button" class="btn btn-outline-danger" onclick="clearTerminal()">
                    <i class="bi bi-trash"></i>
                    Clear Output
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Quick Commands -->
<div class="row mb-3">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-lightning"></i>
                    Quick Commands
                </h5>
            </div>
            <div class="card-body">
                <div class="row g-2">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-outline-success w-100" onclick="executeCommand('cloudflared tunnel login')">
                            <i class="bi bi-shield-lock"></i>
                            Authenticate
                        </button>
                    </div>
                    <div class="col-md-3">
                        <button type="button" class="btn btn-outline-info w-100" onclick="executeCommand('cloudflared tunnel list')">
                            <i class="bi bi-list"></i>
                            List Tunnels
                        </button>
                    </div>
                    <div class="col-md-3">
                        <button type="button" class="btn btn-outline-secondary w-100" onclick="executeCommand('cloudflared version')">
                            <i class="bi bi-info-circle"></i>
                            Version
                        </button>
                    </div>
                    <div class="col-md-3">
                        <button type="button" class="btn btn-outline-warning w-100" onclick="executeCommand('ls -la /etc/cloudflared/')">
                            <i class="bi bi-folder"></i>
                            Config Files
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Custom Command -->
<div class="row mb-3">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-code"></i>
                    Custom Command
                </h5>
            </div>
            <div class="card-body">
                <div class="input-group">
                    <input type="text" class="form-control" id="customCommand" placeholder="Enter command (e.g., cloudflared tunnel list)" onkeypress="handleCommandKeypress(event)">
                    <button type="button" class="btn btn-primary" onclick="executeCustomCommand()">
                        <i class="bi bi-play"></i>
                        Execute
                    </button>
                </div>
                <small class="text-muted mt-2 d-block">
                    <strong>Tip:</strong> Press Enter to execute the command
                </small>
            </div>
        </div>
    </div>
</div>

<!-- Command Output -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="bi bi-terminal"></i>
                    Command Output
                </h5>
                <div>
                    <span class="badge bg-secondary" id="commandStatus">Ready</span>
                    <small class="text-muted ms-2" id="lastCommand"></small>
                </div>
            </div>
            <div class="card-body p-0">
                <textarea id="terminalOutput" class="form-control terminal-output" readonly rows="20" placeholder="Command output will appear here..."></textarea>
            </div>
        </div>
    </div>
</div>

<!-- Instructions -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card border-info">
            <div class="card-header bg-info text-white">
                <h6 class="card-title mb-0">
                    <i class="bi bi-info-circle"></i>
                    How to Use the Terminal
                </h6>
            </div>
            <div class="card-body">
                <h6>Quick Start:</h6>
                <ol>
                    <li>Use the <strong>Quick Commands</strong> buttons above for common tasks</li>
                    <li>Or enter custom commands in the <strong>Custom Command</strong> field</li>
                    <li>View command output in the <strong>Command Output</strong> area below</li>
                    <li>Use "Clear Output" to clean the output area</li>
                </ol>
                
                <div class="alert alert-success mt-3">
                    <i class="bi bi-lightbulb"></i>
                    <strong>Authentication:</strong> 
                    Click "Authenticate" button to start the Cloudflare login process. Follow the URL in the output to complete authentication.
                </div>
                
                <div class="alert alert-warning mt-3">
                    <i class="bi bi-shield-exclamation"></i>
                    <strong>Security:</strong> 
                    Only safe, predefined commands are allowed for security reasons.
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Simplified Terminal JavaScript
console.log('Simplified terminal loading...');

// Terminal variables
let isExecuting = false;

// Execute a command
function executeCommand(command) {
    if (isExecuting) {
        showAlert('A command is already running. Please wait...', 'warning');
        return;
    }
    
    const output = document.getElementById('terminalOutput');
    const status = document.getElementById('commandStatus');
    const lastCommand = document.getElementById('lastCommand');
    
    // Update UI
    isExecuting = true;
    status.textContent = 'Running';
    status.className = 'badge bg-warning';
    lastCommand.textContent = `Last: ${command}`;
    
    // Add command to output
    const timestamp = new Date().toLocaleTimeString();
    output.value += `\n[${timestamp}] $ ${command}\n`;
    output.scrollTop = output.scrollHeight;
    
    // Execute command via API
    fetch('/api/terminal/execute', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ command: command })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            output.value += data.output || 'Command completed successfully.';
            status.textContent = 'Success';
            status.className = 'badge bg-success';
        } else {
            output.value += `Error: ${data.error || 'Command failed'}`;
            status.textContent = 'Error';
            status.className = 'badge bg-danger';
        }
        output.value += '\n';
        output.scrollTop = output.scrollHeight;
    })
    .catch(error => {
        console.error('Command execution error:', error);
        output.value += `Error: Failed to execute command - ${error.message}\n`;
        status.textContent = 'Error';
        status.className = 'badge bg-danger';
        output.scrollTop = output.scrollHeight;
    })
    .finally(() => {
        isExecuting = false;
        setTimeout(() => {
            status.textContent = 'Ready';
            status.className = 'badge bg-secondary';
        }, 3000);
    });
}

// Execute custom command
function executeCustomCommand() {
    const input = document.getElementById('customCommand');
    const command = input.value.trim();
    
    if (!command) {
        showAlert('Please enter a command', 'warning');
        return;
    }
    
    executeCommand(command);
    input.value = '';
}

// Handle Enter key in custom command input
function handleCommandKeypress(event) {
    if (event.key === 'Enter') {
        executeCustomCommand();
    }
}

// Clear terminal output
function clearTerminal() {
    const output = document.getElementById('terminalOutput');
    const status = document.getElementById('commandStatus');
    const lastCommand = document.getElementById('lastCommand');
    
    output.value = '';
    status.textContent = 'Ready';
    status.className = 'badge bg-secondary';
    lastCommand.textContent = '';
    
    showAlert('Terminal output cleared', 'success');
}

// Show alert messages
function showAlert(message, type = 'info') {
    // Create alert element
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    // Insert at top of page
    const container = document.querySelector('.container-fluid');
    const firstRow = container.querySelector('.row');
    container.insertBefore(alertDiv, firstRow);
    
    // Auto-dismiss after 3 seconds
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 3000);
}

// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log('Simplified terminal initialized');
    
    // Add welcome message
    const output = document.getElementById('terminalOutput');
    output.value = 'ðŸš€ Cloudflare Tunnel Command Terminal\n';
    output.value += 'ðŸ’¡ Use the Quick Commands above or enter custom commands\n';
    output.value += 'ðŸ”’ Only safe, predefined commands are allowed\n\n';
});


</script>

<style>
.terminal-output {
    background-color: #1e1e1e;
    color: #d4d4d4;
    border: none;
    font-family: 'Consolas', 'Courier New', monospace;
    font-size: 14px;
    line-height: 1.4;
    resize: vertical;
    min-height: 400px;
    border-radius: 0 0 0.375rem 0.375rem;
}

.terminal-output:focus {
    background-color: #1e1e1e;
    color: #d4d4d4;
    border: none;
    box-shadow: none;
    outline: none;
}

.terminal-output::placeholder {
    color: #6c757d;
    font-style: italic;
}

.quick-command-btn {
    transition: all 0.2s ease;
}

.quick-command-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.badge {
    font-size: 0.75rem;
}

.alert {
    animation: slideInDown 0.3s ease;
}

@keyframes slideInDown {
    from {
        transform: translateY(-20px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}
</style>

<%- include('partials/footer') %>
